// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MXBleProvision
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreBluetooth
import CryptoSwift
import Foundation
@_exported import MXBleProvision
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @objcMembers open class MXEncryption : ObjectiveC.NSObject {
  public static func Endcode_AES(hexStr: Swift.String, keyHex: Swift.String, ivKey: Swift.String?, padding: CryptoSwift.Padding = .noPadding) -> Foundation.Data
  public static func Decode_AES(strToDecode: Swift.String, keyHex: Swift.String, ivKey: Swift.String?, padding: CryptoSwift.Padding = .noPadding) -> Swift.String
  @objc public static func pbkdf2(hash: CommonCrypto.CCPBKDFAlgorithm, password: Swift.String, salt: Foundation.Data, keyByteCount: Swift.Int, rounds: Swift.Int) -> Foundation.Data?
  @objc override dynamic public init()
  @objc deinit
}
public enum MXProvisionResultCode : Swift.Int {
  case ResultCode_Success
  case ResultCode_Timeout
  case ResultCode_BluetoothNotOpen
  case ResultCode_Fail
  case ResultCode_NotFoundDevice
  case ResultCode_ConnectFail
  case ResultCode_NotFoundService
  case ResultCode_NotFoundCharacteristics
  case ResultCode_NotifyCharacteristicsFail
  case ResultCode_ConnectWifiFail
  case ResultCode_ConnectCloudFail
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class MXBluetoothProtocolHandler : ObjectiveC.NSObject {
  public func segment(_ data: Foundation.Data, toMtu mtu: Swift.Int) -> [Foundation.Data]
  public func reassemble(_ data: Foundation.Data) -> (Foundation.Data)?
  public func mxFog_segment(_ data: Foundation.Data, toMtu mtu: Swift.Int) -> [Foundation.Data]
  public func mxFog_reassemble(_ data: Foundation.Data) -> (Foundation.Data)?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol MXBleProvisionDelegate {
  @objc optional func inputWifiInfo(handler: @escaping ((_ ssid: Swift.String, _ password: Swift.String) -> Swift.Void))
  @objc optional func mxBleProvisionProcess(deviceIdentifier: Swift.String, step: Swift.Int)
  @objc optional func mxBleProvisionFinish(deviceIdentifier: Swift.String, error: Foundation.NSError?, device_name: Swift.String?)
  @objc optional func requestBleKey(params: [Swift.String : Any]?, type: Swift.Int, handler: @escaping ((_ cipher: Swift.String?) -> Swift.Void))
  @objc optional func requestConnectStatus(params: [Swift.String : Any]?, type: Swift.Int, handler: @escaping ((_ connectStatus: Swift.Bool) -> Swift.Void))
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class MXLivingProvisionManager : ObjectiveC.NSObject {
  @objc public static var shard: MXBleProvision.MXLivingProvisionManager
  @objc weak public var provisionDelegate: (any MXBleProvision.MXBleProvisionDelegate)?
  @objc deinit
  @objc public func setTimeOut(timeNum: Swift.Int)
}
extension MXBleProvision.MXLivingProvisionManager {
  @objc dynamic public func provisionDevice(productKey: Swift.String, mac: Swift.String? = nil, delegate: (any MXBleProvision.MXBleProvisionDelegate)?)
}
extension MXBleProvision.MXLivingProvisionManager : CoreBluetooth.CBCentralManagerDelegate, CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func startScan()
  @objc dynamic public func stopScan()
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didModifyServices invalidatedServices: [CoreBluetooth.CBService])
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheralIsReady(toSendWriteWithoutResponse peripheral: CoreBluetooth.CBPeripheral)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class MXTMallProvisionManager : ObjectiveC.NSObject {
  @objc public static var shard: MXBleProvision.MXTMallProvisionManager
  @objc weak public var provisionDelegate: (any MXBleProvision.MXBleProvisionDelegate)?
  @objc deinit
  @objc public func setTimeOut(timeNum: Swift.Int)
}
extension MXBleProvision.MXTMallProvisionManager {
  @objc dynamic public func provisionDevice(productKey: Swift.String, mac: Swift.String? = nil, secret: Swift.String? = nil, delegate: (any MXBleProvision.MXBleProvisionDelegate)?)
}
extension MXBleProvision.MXTMallProvisionManager : CoreBluetooth.CBCentralManagerDelegate, CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func startScan()
  @objc dynamic public func stopScan()
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didModifyServices invalidatedServices: [CoreBluetooth.CBService])
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheralIsReady(toSendWriteWithoutResponse peripheral: CoreBluetooth.CBPeripheral)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class MXFogProvisionManager : ObjectiveC.NSObject {
  @objc public static var shard: MXBleProvision.MXFogProvisionManager
  @objc weak public var provisionDelegate: (any MXBleProvision.MXBleProvisionDelegate)?
  @objc deinit
  @objc public func setTimeOut(timeNum: Swift.Int)
}
extension MXBleProvision.MXFogProvisionManager {
  @objc dynamic public func provisionDevice(productKey: Swift.String, deviceName: Swift.String, secret: Swift.String? = nil, customParams: [Swift.String : Any]? = nil, delegate: (any MXBleProvision.MXBleProvisionDelegate)?)
}
extension MXBleProvision.MXFogProvisionManager : CoreBluetooth.CBCentralManagerDelegate, CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func startScan()
  @objc dynamic public func stopScan()
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didModifyServices invalidatedServices: [CoreBluetooth.CBService])
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheralIsReady(toSendWriteWithoutResponse peripheral: CoreBluetooth.CBPeripheral)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MXBleProvisionManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MXBleProvision.MXBleProvisionManager
  public typealias MXScanResultCallback = (_ devices: [[Swift.String : Any]], _ isStop: Swift.Bool) -> ()
  @objc public var scanDevices: [[Swift.String : Any]]
  @objc override dynamic public init()
  @objc public func startScan(timeout: Swift.Int = 0, callback: @escaping MXBleProvision.MXBleProvisionManager.MXScanResultCallback)
  @objc public func stopScan()
  @objc deinit
}
extension MXBleProvision.MXBleProvisionManager : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
}
extension MXBleProvision.MXBleProvisionManager {
  @objc public static func startProvision(type: Swift.Int, productKey: Swift.String, deviceName: Swift.String? = nil, mac: Swift.String? = nil, secret: Swift.String? = nil, customParams: [Swift.String : Any]? = nil, delegate: (any MXBleProvision.MXBleProvisionDelegate)?)
  @objc public static func cleanProvisionCache()
}
extension MXBleProvision.MXProvisionResultCode : Swift.Equatable {}
extension MXBleProvision.MXProvisionResultCode : Swift.Hashable {}
extension MXBleProvision.MXProvisionResultCode : Swift.RawRepresentable {}
